<div class="openall">
  
  Key words <b>Reserved words, lowercase-only</b>
  Programmer-defined Identifiers<b>Variable names repsenting memory locations</b>
  Operators <br>
  Punctuation <br>
  Syntax <br>

  Numeric Types <b>whole numbers (integers), real (floating point)</b>

  Comments <b>
    Single-line comments start with <span>//</span> and last until EOL.
    Multiline comments are the same as CSS: <span>/* comment */</span>
  </b>
  
  Preprocessor directive <b>
  <span>#include &lt;filename&gt; </span>
  Dont include semicolons after these
  </b>

  Namespacing <b><span>using namespace foobar;</span></b>

  Main function <b><span>int main()</span></b>

  cin (stdin) <b>
    extracting one value: <span>cin >> myVar</span>
    extracting multiple values: <span>cin >> myVar >> myOtherVar</span>
    When entering multiple values, separate args by any number of spaces
    <span>cin.getline(variableName, size+1)</span>
    <span>cin.get</span> accepts the "\n" newline as a character
    <span>cin.ignore(num, char)</span> ignores wither "num" characters
    or "char" character, whichever comes first.
  </b>

  over / underflow <b>
    overflow is when val is too large (wrap to negative)
    underflow is when val is too small (wrap to positive)
  </b>

  typecasting <b>
    <span>static_cast&lt;DataType&gt;(Value)</span>
    i.e. <span>static_cast&lt;double&gt;(3) / 2 </span>

    Shorthand: <span>(int)2.5;</span>
  </b>

  constants <b>
    method 1: <span>const double PI = 3.14159;</span>
    method 2: <span>#define PI 3.14159</span>
    Note there's no semicolon when using "define".
  </b>

  comparison operators <b>
  Resolve to 0 and 1.
  </b>

  Logic operator precedence <b>
    <span>!</span>
    <span>&&</span>
    <span>||</span>
  </b>
  
  Break out of a loop <b>
    Use the <span>break</span> keyword.
    This only breaks through the most recent level of looping
  </b>

  Continue through a loop <b>
    Use the <span>continue</span> keyword
  </b>


</div>